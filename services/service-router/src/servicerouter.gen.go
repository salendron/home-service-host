// Package Openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

// Service defines model for Service.
type Service struct {
	Address        *string `json:"address,omitempty"`
	DefinitionPath *string `json:"definitionPath,omitempty"`
	IsHealthy      *bool   `json:"isHealthy,omitempty"`
	Latency        *int    `json:"latency,omitempty"`
	Name           *string `json:"name,omitempty"`
	Version        *string `json:"version,omitempty"`
}

// RegisterServiceJSONBody defines parameters for RegisterService.
type RegisterServiceJSONBody Service

// RegisterServiceRequestBody defines body for RegisterService for application/json ContentType.
type RegisterServiceJSONRequestBody RegisterServiceJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RegisterService request  with any body
	RegisterServiceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RegisterService(ctx context.Context, body RegisterServiceJSONRequestBody) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context) (*http.Response, error)
}

func (c *Client) RegisterServiceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterService(ctx context.Context, body RegisterServiceJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterServiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewRegisterServiceRequest calls the generic RegisterService builder with application/json body
func NewRegisterServiceRequest(server string, body RegisterServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterServiceRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterServiceRequestWithBody generates requests for RegisterService with any type of body
func NewRegisterServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/servicerouter/v1/register")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/servicerouter/v1/services")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RegisterService request  with any body
	RegisterServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterServiceResponse, error)

	RegisterServiceWithResponse(ctx context.Context, body RegisterServiceJSONRequestBody) (*RegisterServiceResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context) (*ListServicesResponse, error)
}

type RegisterServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r RegisterServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Service
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RegisterServiceWithBodyWithResponse request with arbitrary body returning *RegisterServiceResponse
func (c *ClientWithResponses) RegisterServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterServiceResponse, error) {
	rsp, err := c.RegisterServiceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterServiceResponse(rsp)
}

func (c *ClientWithResponses) RegisterServiceWithResponse(ctx context.Context, body RegisterServiceJSONRequestBody) (*RegisterServiceResponse, error) {
	rsp, err := c.RegisterService(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterServiceResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// ParseRegisterServiceResponse parses an HTTP response from a RegisterServiceWithResponse call
func ParseRegisterServiceResponse(rsp *http.Response) (*RegisterServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RegisterServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// registerService
	// (POST /servicerouter/v1/register)
	RegisterService(ctx echo.Context) error
	// listServices
	// (GET /servicerouter/v1/services)
	ListServices(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterService converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterService(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterService(ctx)
	return err
}

// ListServices converts echo context to params.
func (w *ServerInterfaceWrapper) ListServices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServices(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/servicerouter/v1/register", wrapper.RegisterService)
	router.GET(baseURL+"/servicerouter/v1/services", wrapper.ListServices)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUTW/UQAz9KyPDMd1sAXHIrR8gVgJ1aXtDHKaJdzPVZBxsp21U7X9HM2m2WW0OSCBO",
	"icZv7Pf87HmGkpqWAgYVKJ5Byhobm34/MRPHn5apRVaH6bikCuNX+xahABcUt8iwy6BBEbudBkXZhW2M",
	"iVrtZO7eLgN16uPZUDEbIXR3j6XG2zfID67EYzK2qhhFZktWuHHBqaOwtlrPQpx8Qeu17ifROyKPNsSw",
	"t4qh7OfVBtvMS31AFkdhJjaROio6EhtBLmwoXq9QSnatpmxwWzsxZ+uVcWI6wcooGcatE0U2MuQTY0MK",
	"4FNLgiZm4sbGDMbeUadGa2wWkIF3JQZJCgYlcHt1eQUZdOyhgFq1LfJcqaJFSQ0cUzfX1MXKZ+sVTETD",
	"6WK5WEY8tRhs66CA9+kog9ZqnbzKX+hySpE/nOajkGQxiR7Lvx6lWhPwcRQMqQ4nhatqAnttMOOvDkXP",
	"qeqH+Q2KIRWwbetdme7m9zJYNixA/HvLuIEC3uSvG5K/rEc+Zk92HfIc2zMYOjXphYtjrKBQ7nAXD6Sl",
	"IMM0v1su/wfDSSf3qAw+/MPiwyLPlD63lbke/EjrIF3TWO6hAD7y7elk7+yJoKoL29SlM+/p8bIPtnHl",
	"Z+Jmbdk2qMgCxcZ6wewA8r1D7mcwF+Q9ljoTWcm3zqu7GDpxo4y2ifs7xJOq4wEeFzAy3OLM/H51omKs",
	"9/tdPZrdCLl5Df7VbDjFRv54SPbPkGW2/ZxzkZuhzV5AGV/gQwv9lH5KEYGpsz+eD98VT6X1NYkWH5fL",
	"Jex+7n4HAAD//5VCstiJBgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
